{
    "pipes": [],
    "interfaces": [
        {
            "name": "LoggerParams",
            "id": "interface-LoggerParams-2b40551ebdfdda2896633efea6c591bb",
            "file": "src/components/core/common/log.decorator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface LoggerParams {\r\n  type?: 'log' | 'trace' | 'warn' | 'info' | 'debug';\r\n  inputs?: boolean;\r\n  outputs?: boolean;\r\n}\r\n\r\nconst defaultParams: Required<LoggerParams> = {\r\n  type: 'debug',\r\n  inputs: true,\r\n  outputs: true,\r\n};\r\n\r\nexport function Log(params?: LoggerParams) {\r\n  const options: Required<LoggerParams> = {\r\n    type: params?.type || defaultParams.type,\r\n    inputs: params?.inputs === undefined ? defaultParams.inputs : params.inputs,\r\n    outputs: params?.outputs === undefined ? defaultParams.outputs : params.outputs,\r\n  };\r\n\r\n  return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\r\n    const original = descriptor.value;\r\n\r\n    descriptor.value = function(...args: any[]) {\r\n      if (options.inputs) {\r\n        console[options.type]('Logged inputs:', args);\r\n      }\r\n\r\n      const result = original.apply(this, args);\r\n\r\n      if (options.outputs) {\r\n        console[options.type]('Logged outputs', result);\r\n      }\r\n\r\n      return result;\r\n    };\r\n  };\r\n}\r\n",
            "properties": [
                {
                    "name": "inputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "outputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"log\" | \"trace\" | \"warn\" | \"info\" | \"debug\"",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "TemplateLookup",
            "id": "class-TemplateLookup-0d23998e8e09b4f4b705afa207028be5",
            "file": "src/components/core/tests/template-lookup.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DebugElement, Predicate, Type } from '@angular/core';\r\nimport { ComponentFixture } from '@angular/core/testing';\r\nimport { By } from '@angular/platform-browser';\r\n\r\nexport class TemplateLookup<T> {\r\n  get firstChildElement(): HTMLElement {\r\n    return this.fixture.debugElement.children[0].nativeElement;\r\n  }\r\n\r\n  get hostComponent(): T {\r\n    return this.fixture.componentInstance;\r\n  }\r\n\r\n  constructor(public readonly fixture: ComponentFixture<T>) {\r\n  }\r\n\r\n  public detectChanges(): void {\r\n    this.fixture.detectChanges();\r\n  }\r\n\r\n  public get(selectorOrType: string | Type<any>): DebugElement {\r\n    let predicate: Predicate<DebugElement>;\r\n\r\n    if (typeof selectorOrType === 'string') {\r\n      predicate = By.css(selectorOrType);\r\n    } else {\r\n      predicate = By.directive(selectorOrType);\r\n    }\r\n\r\n    return this.fixture.debugElement.query(predicate);\r\n  }\r\n\r\n  public query<T extends HTMLElement>(selectorOrType: string | Type<any>): T {\r\n    return this.get(selectorOrType).nativeElement;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fixture",
                        "type": "ComponentFixture<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "fixture",
                        "type": "ComponentFixture<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "fixture",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentFixture<T>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123,
                        143
                    ]
                }
            ],
            "methods": [
                {
                    "name": "detectChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "selectorOrType",
                            "type": "string | Type<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DebugElement",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "selectorOrType",
                            "type": "string | Type<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "query",
                    "args": [
                        {
                            "name": "selectorOrType",
                            "type": "string | Type<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "selectorOrType",
                            "type": "string | Type<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "firstChildElement": {
                    "name": "firstChildElement",
                    "getSignature": {
                        "name": "firstChildElement",
                        "type": "",
                        "returnType": "HTMLElement",
                        "line": 6
                    }
                },
                "hostComponent": {
                    "name": "hostComponent",
                    "getSignature": {
                        "name": "hostComponent",
                        "type": "",
                        "returnType": "T",
                        "line": 10
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "ButtonDirective",
            "id": "directive-ButtonDirective-41ffeb4c9b63deeac292e3c9d58520c1",
            "file": "src/components/atoms/button/button.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input } from '@angular/core';\r\nimport { CoerceBoolean } from '../../core/common/coerce-boolean-inputs.decorator';\r\n\r\n@Directive({\r\n  selector: 'button[adrButton]',\r\n  host: {\r\n    class: 'adr-button',\r\n    '[class.adr-small]': 'size === \"small\"',\r\n    '[class.adr-medium]': 'size === \"medium\"',\r\n    '[class.adr-large]': 'size === \"large\"',\r\n    '[class.adr-outlined]': 'outlined',\r\n    '[class.adr-primary]': 'color === \"primary\"',\r\n    '[class.adr-accent]': 'color === \"accent\"',\r\n    '[class.adr-warn]': 'color === \"warn\"'\r\n  }\r\n})\r\nexport class ButtonDirective {\r\n  @Input()\r\n  public size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  @Input()\r\n  @CoerceBoolean()\r\n  public outlined?: boolean;\r\n\r\n  @Input()\r\n  public color: 'primary' | 'accent' | 'warn' = 'primary';\r\n}\r\n",
            "selector": "button[adrButton]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "\"primary\" | \"accent\" | \"warn\""
                },
                {
                    "name": "outlined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "InputDirective",
            "id": "directive-InputDirective-ca6d9fbf0551c3ee568e59c3d297374f",
            "file": "src/components/atoms/forms/input/input.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, EventEmitter, HostBinding, HostListener, Input, Output } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { AutoUnsubscribe } from '../../../core/common/auto-unsubscribe.decorator';\r\nimport { CoerceBoolean } from '../../../core/common/coerce-boolean-inputs.decorator';\r\n\r\n@Directive({\r\n  selector: 'input[adrInput]',\r\n  host: {\r\n    class: 'adr-input',\r\n    '[class.adr-focused]': 'focused || null',\r\n    '[class.adr-readonly]': 'readonly || null',\r\n    '[class.adr-disabled]': 'disabled || null'\r\n  },\r\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: InputDirective, multi: true }]\r\n})\r\n@AutoUnsubscribe()\r\nexport class InputDirective implements ControlValueAccessor {\r\n  @HostBinding('attr.value')\r\n  @Input()\r\n  public value: any;\r\n\r\n  @Input()\r\n  @HostBinding('readonly')\r\n  @CoerceBoolean()\r\n  public readonly: boolean = false;\r\n\r\n  @Output()\r\n  public readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  private _disabled: boolean = false;\r\n\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n\r\n  @Input()\r\n  @HostBinding('disabled')\r\n  @CoerceBoolean()\r\n  set disabled(disabled) {\r\n    this._disabled = disabled;\r\n  }\r\n\r\n  private _focused: boolean = false;\r\n\r\n  get focused(): boolean {\r\n    return this._focused;\r\n  }\r\n\r\n  public writeValue(value: any): void {\r\n    this.value = value;\r\n  }\r\n\r\n  public registerOnChange(fn: any): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  public registerOnTouched(fn: any): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  public setDisabledState(disabled: boolean): void {\r\n    this.disabled = disabled;\r\n  }\r\n\r\n  @HostListener('input', ['$event.target.value'])\r\n  public onInput(value: any): void {\r\n    if (!this.readonly && !this.disabled) {\r\n      this.value = value;\r\n      this.valueChange.emit(value);\r\n      this._onChange(value);\r\n      this._onTouched();\r\n    }\r\n  }\r\n\r\n  @HostListener('focus', ['true'])\r\n  @HostListener('blur', ['false'])\r\n  public onToggleFocus(focused: boolean): void {\r\n    if (!this.readonly && !this.disabled) {\r\n      this._focused = focused;\r\n      this._onTouched();\r\n    }\r\n  }\r\n\r\n  protected _onChange = (_: any): void => {\r\n  };\r\n\r\n  protected _onTouched = (): void => {\r\n  };\r\n}\r\n",
            "selector": "input[adrInput]",
            "providers": [
                {
                    "name": "{ provide: NG_VALUE_ACCESSOR, useExisting: InputDirective, multi: true }",
                    "type": "directive"
                }
            ],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean"
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<any>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "blur",
                    "args": [
                        {
                            "name": "focused",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "false"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77
                },
                {
                    "name": "focus",
                    "args": [
                        {
                            "name": "focused",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "true"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77
                },
                {
                    "name": "input",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target.value"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66
                }
            ],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_focused",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'input', ['$event.target.value']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onToggleFocus",
                    "args": [
                        {
                            "name": "focused",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focus', ['true']"
                        },
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'blur', ['false']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "focused",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "disabled",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 39,
                        "jsdoctags": [
                            {
                                "name": "disabled",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 32
                    }
                },
                "focused": {
                    "name": "focused",
                    "getSignature": {
                        "name": "focused",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 45
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-faa08070edb7191837ca6441e8c46034",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adr-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'adr-root',\r\n  templateUrl: './app.component.html',\r\n})\r\nexport class AppComponent {\r\n  get sizes(): ('small' | 'medium' | 'large')[] {\r\n    return ['small', 'medium', 'large'];\r\n  }\r\n\r\n  get outlineds(): boolean [] {\r\n    return [true, false];\r\n  }\r\n\r\n  get colors(): ('primary' | 'accent' | 'warn')[] {\r\n    return ['primary', 'accent', 'warn'];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "sizes": {
                    "name": "sizes",
                    "getSignature": {
                        "name": "sizes",
                        "type": "[]",
                        "returnType": "[]",
                        "line": 8
                    }
                },
                "outlineds": {
                    "name": "outlineds",
                    "getSignature": {
                        "name": "outlineds",
                        "type": "[]",
                        "returnType": "boolean[]",
                        "line": 12
                    }
                },
                "colors": {
                    "name": "colors",
                    "getSignature": {
                        "name": "colors",
                        "type": "[]",
                        "returnType": "[]",
                        "line": 16
                    }
                }
            },
            "templateData": "<ng-container *ngFor=\"let color of colors\">\r\n    <ng-container *ngFor=\"let outlined of outlineds\">\r\n        <ng-container *ngFor=\"let size of sizes\">\r\n            <button [color]=\"color\" [outlined]=\"outlined\" [size]=\"size\" adrButton>Button</button>\r\n        </ng-container>\r\n    </ng-container>\r\n</ng-container>\r\n"
        },
        {
            "name": "DummyComponent",
            "id": "component-DummyComponent-5ef2468e3de3fcdef9d94c8b72b949c0",
            "file": "src/components/atoms/button/button.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adr-dummy",
            "styleUrls": [],
            "styles": [],
            "template": "<button adrButton [size]=\"size\" [outlined]=\"outlined\" [color]=\"color\">Click</button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "\"primary\" | \"accent\" | \"warn\""
                },
                {
                    "name": "outlined",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { Meta, Story } from '@storybook/angular';\r\nimport { ButtonDirective } from 'src/components/atoms/button/button.directive';\r\n\r\n@Component({\r\n  selector: 'adr-dummy',\r\n  template: `\r\n      <button adrButton [size]=\"size\" [outlined]=\"outlined\" [color]=\"color\">Click</button>`\r\n})\r\nclass DummyComponent {\r\n  @Input()\r\n  public size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  @Input()\r\n  public outlined: boolean = false;\r\n\r\n  @Input()\r\n  public color: 'primary' | 'accent' | 'warn' = 'primary';\r\n}\r\n\r\nexport default {\r\n  title: 'atoms/button',\r\n  component: DummyComponent\r\n} as Meta;\r\n\r\nconst Template: Story<DummyComponent> = (args) => ({\r\n  props: args, moduleMetadata: { declarations: [ButtonDirective], imports: [CommonModule] }\r\n});\r\n\r\nexport const Default = Template.bind({});\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "InputDummyComponent",
            "id": "component-InputDummyComponent-2e2822af396eedbf7544074d9058dbb6",
            "file": "src/components/atoms/forms/input/input.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adr-input-dummy",
            "styleUrls": [],
            "styles": [],
            "template": "<input adrInput [disabled]=\"disabled\" [readonly]=\"readonly\" [value]=\"value\" (valueChange)=\"valueChange.emit($event)\"\n       placeholder=\"default input\" />",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { action } from '@storybook/addon-actions';\r\nimport { Meta, Story } from '@storybook/angular';\r\nimport { InputDirective } from 'src/components/atoms/forms/input/input.directive';\r\n\r\n@Component({\r\n  selector: 'adr-input-dummy',\r\n  template: `\r\n      <input adrInput [disabled]=\"disabled\" [readonly]=\"readonly\" [value]=\"value\" (valueChange)=\"valueChange.emit($event)\"\r\n             placeholder=\"default input\" />`\r\n})\r\nclass InputDummyComponent {\r\n  @Input()\r\n  public value: any;\r\n\r\n  @Input()\r\n  public readonly: boolean = false;\r\n\r\n  @Input()\r\n  public disabled: boolean = false;\r\n\r\n  @Output()\r\n  public valueChange: EventEmitter<any> = new EventEmitter<any>();\r\n}\r\n\r\nexport default {\r\n  title: 'atoms/forms/input',\r\n  argTypes: {\r\n    value: { control: { type: 'text' } }\r\n  },\r\n  component: InputDummyComponent\r\n} as Meta;\r\n\r\nconst BasicTemplate: Story<InputDummyComponent> = (args) => ({\r\n  props: {\r\n    ...args,\r\n    valueChange: action('log')\r\n  },\r\n  moduleMetadata: { declarations: [InputDirective] }\r\n});\r\n\r\nexport const Default = BasicTemplate.bind({});\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "LabelComponent",
            "id": "component-LabelComponent-cfa6a402db3cc5c7593efe732656b994",
            "file": "src/components/atoms/forms/label/label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adr-label",
            "styleUrls": [],
            "styles": [],
            "template": "toto",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'adr-label',\n  template: `toto`\n})\nexport class LabelComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-bf6e0f8dd8950af400e30c81691fc504",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { ButtonModule } from 'src/components/atoms/button/button.module';\r\nimport { AppComponent } from './app.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    ButtonModule\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "id": "module-ButtonModule-6dd595c982e138505734ef4d21821ca3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/components/atoms/button/button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { ButtonDirective } from 'src/components/atoms/button/button.directive';\r\n\r\n@NgModule({\r\n  declarations: [ButtonDirective],\r\n  exports: [ButtonDirective]\r\n})\r\nexport class ButtonModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputModule",
            "id": "module-InputModule-7d2def43ac862f0474f21c636414a082",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/components/atoms/forms/input/input.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { InputDirective } from './input.directive';\r\n\r\n@NgModule({\r\n  declarations: [InputDirective],\r\n  imports: [CommonModule],\r\n  exports: [InputDirective]\r\n})\r\nexport class InputModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InputDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InputDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LabelModule",
            "id": "module-LabelModule-59cfd0e32fa56c2693d4e8a4617d0eca",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/components/atoms/forms/label/label.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LabelComponent } from './label.component';\n\n\n\n@NgModule({\n  declarations: [\n    LabelComponent\n  ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class LabelModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LabelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "BasicTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/atoms/forms/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputDummyComponent>",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    valueChange: action('log')\r\n  },\r\n  moduleMetadata: { declarations: [InputDirective] }\r\n})"
            },
            {
                "name": "BasicTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/atoms/forms/label/label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<LabelComponent>",
                "defaultValue": "() => ({\n  moduleMetadata: { declarations: [InputDirective] },\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/atoms/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/atoms/forms/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "BasicTemplate.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/atoms/forms/label/label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "BasicTemplate.bind({})"
            },
            {
                "name": "defaultParams",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/core/common/log.decorator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Required<LoggerParams>",
                "defaultValue": "{\r\n  type: 'debug',\r\n  inputs: true,\r\n  outputs: true,\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/atoms/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DummyComponent>",
                "defaultValue": "(args) => ({\r\n  props: args, moduleMetadata: { declarations: [ButtonDirective], imports: [CommonModule] }\r\n})"
            }
        ],
        "functions": [
            {
                "name": "AutoUnsubscribe",
                "file": "src/components/core/common/auto-unsubscribe.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Allows to auto unsubscribe from Observables.</p>\n<p>Automatically check if a (_)subscriptions property exist (must be a Subscription[]), if yes then unsubscribe all.\nAutomatically check this properties, all one which are Observable and is not in the excludeProps is unsubscribe.</p>\n",
                "args": [
                    {
                        "name": "excludeProps",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 307,
                            "end": 319,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "excludeProps"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "pos": 301,
                            "end": 306,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>list of properties to exclude</p>\n"
                    }
                ]
            },
            {
                "name": "CoerceBoolean",
                "file": "src/components/core/common/coerce-boolean-inputs.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "Log",
                "file": "src/components/core/common/log.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "params",
                        "type": "LoggerParams",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "params",
                        "type": "LoggerParams",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/components/atoms/forms/input/input.stories.ts": [
                {
                    "name": "BasicTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/atoms/forms/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputDummyComponent>",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    valueChange: action('log')\r\n  },\r\n  moduleMetadata: { declarations: [InputDirective] }\r\n})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/atoms/forms/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "BasicTemplate.bind({})"
                }
            ],
            "src/components/atoms/forms/label/label.stories.ts": [
                {
                    "name": "BasicTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/atoms/forms/label/label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<LabelComponent>",
                    "defaultValue": "() => ({\n  moduleMetadata: { declarations: [InputDirective] },\n})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/atoms/forms/label/label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "BasicTemplate.bind({})"
                }
            ],
            "src/components/atoms/button/button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/atoms/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/atoms/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DummyComponent>",
                    "defaultValue": "(args) => ({\r\n  props: args, moduleMetadata: { declarations: [ButtonDirective], imports: [CommonModule] }\r\n})"
                }
            ],
            "src/components/core/common/log.decorator.ts": [
                {
                    "name": "defaultParams",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/core/common/log.decorator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Required<LoggerParams>",
                    "defaultValue": "{\r\n  type: 'debug',\r\n  inputs: true,\r\n  outputs: true,\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/components/core/common/auto-unsubscribe.decorator.ts": [
                {
                    "name": "AutoUnsubscribe",
                    "file": "src/components/core/common/auto-unsubscribe.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Allows to auto unsubscribe from Observables.</p>\n<p>Automatically check if a (_)subscriptions property exist (must be a Subscription[]), if yes then unsubscribe all.\nAutomatically check this properties, all one which are Observable and is not in the excludeProps is unsubscribe.</p>\n",
                    "args": [
                        {
                            "name": "excludeProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 307,
                                "end": 319,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "excludeProps"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "pos": 301,
                                "end": 306,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>list of properties to exclude</p>\n"
                        }
                    ]
                }
            ],
            "src/components/core/common/coerce-boolean-inputs.decorator.ts": [
                {
                    "name": "CoerceBoolean",
                    "file": "src/components/core/common/coerce-boolean-inputs.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "src/components/core/common/log.decorator.ts": [
                {
                    "name": "Log",
                    "file": "src/components/core/common/log.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "params",
                            "type": "LoggerParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "LoggerParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 5,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/atoms/button/button.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ButtonDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/components/atoms/button/button.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "DummyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/components/atoms/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/atoms/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/atoms/forms/input/input.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "InputDirective",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/components/atoms/forms/input/input.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputDummyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/components/atoms/forms/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BasicTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/atoms/forms/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/atoms/forms/label/label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/atoms/forms/label/label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BasicTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/atoms/forms/label/label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/core/common/auto-unsubscribe.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "AutoUnsubscribe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/components/core/common/coerce-boolean-inputs.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "CoerceBoolean",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/core/common/log.decorator.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoggerParams",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/components/core/common/log.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "Log",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/core/common/log.decorator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultParams",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/core/tests/template-lookup.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TemplateLookup",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}